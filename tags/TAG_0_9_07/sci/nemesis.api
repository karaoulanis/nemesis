
domain.dim(n) Set domain dimensions.
domain.axisymmetric(radius) Define an axisymmetric domain.
domain.zeroDisplacements() Reset displacements to zero.
domain.RayleighDamping(aK,bM) Set Rayleigh damping factors
domain.eigenvalues() Return the eigenvalues of the domain.

db.SQLite(filename) Create and utilize an SQLite database.
db.close() Close current database.
db.store(state_name) Store domain's state to the database.
db.exportToVtk(state_name) Export a stored domain's state to vtk file format.

node.add(id,x1|,x2|,x3) Create new node. 
node.fix(id,dof|,c) Fix a certain degree of freedom.
node.info(id) Print nodal info.

element.bar2s(id,node_i,node_j,mat,sec) Define a simple 2-node bar.
element.beam(id,node_i,node_j,mat,sec) Define a 2d beam.
element.quad4d(id,node_1,node_2,node_3,node_4,mat) Define a 4-Noded standard displacement quad.

group.state(id,active|,facK|,facS|,facG|,facP) Set group options.

lc.define(id,name) Define a new loadcase.

material.uniaxialElastic(id,E,nu|,rho|,aT) Define a uniaxial elastic material.

section.user(id,A|,As2|,As3|,J1|,J2|,J3|,h2|,h3) Define a user cross-section.

load.node(node,dof,f) Define a constant nodal load.
load.linear(node,dof,f0,grad) Define a linear in time nodal load.
load.sin(node,dof,alpha,omega,phi) Define a sinus nodal load.
load.beamPoint(beam,direction,a,p) Define a concentrated force load acting on a beam.
load.beamUniform(beam,direction,p) Define a uniform force load acting on a beam.

groundMotion.file(dof_id,filename,dt|,scale) Define a uniform excitation through a file.
groundMotion.sin(dof_id,a,omega|,phi) Define a sinus uniform excitation.

initial.stresses(group_id,h1,s1,h2,s2,K0)

analysis.static() Define a static analysis.
analysis.transient() Define a static analysis.
analysis.shakeDown() Define a shakeDown analysis.
analysis.run(lc,plc,steps) Run given analysis.

algorithm.linear() Use linear algorithm.
algorithm.fNR() Use full Newton-Raphson algorithm.
algorithm.mNR() Use modified Newton-Raphson algorithm.
algorithm.iNR() Use Newton-Raphson algorithm with initial stiffness.
algorithm.BFGS() Use the penalty method to impose constraints.

imposer.elimination() Use the elimination method to impose constraints.
imposer.lagrange() Use the Lagrange multipliers method to impose constraints.
imposer.penalty(alpha) Use the penalty method to impose constraints.

soe.full() Use a full storage scheme to hold the system of equations.
soe.symm() Use a symmetric storage scheme to hold the system of equations.
soe.band() Use a band storage scheme to hold the system of equations.
soe.plotGraph(filename) Plot the Graph of the system of equations under given filename.

reorder.rCM() Use reverse Cuthill-Mckee to reorder nodal numbering.
reorder.fCM() Use forward Cuthill-Mckee to reorder nodal numbering.
reorder.rSloan() Use reverse Sloan to reorder nodal numbering.
reorder.fSloan() Use forward Sloan to reorder nodal numbering.
reorder.none() Use no scheme to reorder nodal numbering.

convergence.set(maxSteps|,Rabs|,Rrel|,Erel) Set convergence options.

extras.load
extras.load.line()
