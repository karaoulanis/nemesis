
import json

#domain
domain.planeStrain(1.0)
domain.gravity(10., ( 0.0, -1.0, 0.0))

#materials
material.elastic( 1, 2000., 0., 2.)

#nodes
node.add(1,    0.0,   0.0)
node.add(2,    1.0,   0.0)
node.add(3,    0.0,   1.0)
node.add(4,    1.0,   1.0)
node.add(5,    0.0,   2.0)
node.add(6,    1.0,   2.0)

#elements
group.define(1)
element.quad4d(1, 1, 2, 4, 3, 1)
group.define(2)
element.quad4d(2, 3, 4, 6, 5, 1)

#constraints
node.fix(1, 1)
node.fix(1, 2)
node.fix(2, 1)
node.fix(2, 2)
node.fix(3, 1)
node.fix(4, 1)
node.fix(5, 1)
node.fix(6, 1)

lc.define(1,'Self weight')
group.state(1, 1, 1., 1., 1., 1.)
group.state(2, 1, 1., 1., 1., 1.)
lc.define(2,'Excavation')
group.state(1, 1, 1., 1., 1., 1.)
group.state(2, 0)


#---------------------------------------------------------
# slef weight analysis
#---------------------------------------------------------
analysis.static()
#imposer.elimination()
#imposer.penalty(1e14)
imposer.lagrange()
control.load(1.0)
algorithm.linear()
convergence.set(20,1e-2,1e-6)
#reorder.rCM()
soe.full()
analysis.run(1,1)
print "u5  = ",json.loads(node.data(3))['disp']#[1]
print "u7  = ",json.loads(node.data(4))['disp']#[1]
print "u9  = ",json.loads(node.data(5))['disp']#[1]
print "u11 = ",json.loads(node.data(6))['disp']#[1]

#---------------------------------------------------------
# excavation analysis
#---------------------------------------------------------
analysis.run(2,1)
print "u5  = ",json.loads(node.data(3))['disp']#[1]
print "u7  = ",json.loads(node.data(4))['disp']#[1]


