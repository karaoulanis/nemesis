
#==========================================================
# init
#==========================================================
from math import pi

#==========================================================
# domain
#==========================================================
domain.axisymmetric(1.0)
db.SQLite("MohrCoulomb")

#==========================================================
# material
#==========================================================
material.elastic( 1, 1000., 0.25)
material.MohrCoulomb( 2, 1, 15.,20./180.*pi,20./180.*pi)

#==========================================================
# geometry/bc's
#==========================================================
node.add( 1, 0., 0.)
node.add( 2, 1., 0.)
node.add( 3, 1., 1.)
node.add( 4, 0., 1.)
element.quad4d( 1, 1, 2, 3, 4, 2)
node.fix(1,1)
node.fix(1,2)
node.fix(2,2)
node.fix(4,1)

#==========================================================
# trackers
#==========================================================
node.track(3)
element.track(1,3)

#==========================================================
# analysis options
#==========================================================
analysis.static()
imposer.elimination()
algorithm.iNR()
convergence.set(160,1e-6,1e-6,1e-6)

#==========================================================
# lc 1 (isotropic loading)
#========================================================== 
lc.define(1)
load.node(4,2,-1/6.)
load.node(3,2,-1/3.)
load.node(2,1,-0.5)
load.node(3,1,-0.5)
control.load(1.)
analysis.run(1,1)
db.store("lc01")
db.exportToVtk("lc01")


#==========================================================
# lc 2 (compression (-0.005)/tension (+0.005))
#==========================================================
lc.define(2)
load.node(4,2,-1/6.)
load.node(3,2,-1/3.)
load.node(2,1,-.0)
load.node(3,1,-.0)
control.disp(3,2,+0.005)
analysis.run(2,60)

#==========================================================
# plot
#==========================================================
print "u3x = ",node.data(3)['disp'][0]
print "u3y = ",node.data(3)['disp'][1]
print "u4x = ",node.data(4)['disp'][0]
print "u4y = ",node.data(4)['disp'][1]
import tracker
tracker.plotNodePath(3,'u_y','lambda',-1., 1.,"results.txt")
#~ tracker.plotElemPath(1,3,'eps_y','sigma_y',-1.0,-1.0)
