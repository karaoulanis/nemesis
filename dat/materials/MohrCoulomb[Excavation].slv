
#==========================================================
# init
#==========================================================
from math import pi,sin,tan

#==========================================================
# domain
#==========================================================
domain.planeStrain(1.0)
domain.gravity(10.0,(0.,-1.,0.))
db.SQLite("MohrCoulomb")

#==========================================================
# material
#==========================================================
material.elastic( 10000000, 40000., 0.2, 2.)
#~ material.MohrCoulomb( 2, 1, 15.,20./180.*pi,20./180.*pi)

n=200
L=10.
dx=L/n
c   = 13.23771
phi = 23./180.*pi
H   = 4.
Ho  = 4.0

# nodes
for i in range(n+1):
	for j in range(n+1):
		id=j+i*1000+1
		x=j*dx
		y=i*dx-L
			
		node.add(id,x,y)
# elements + materials
for i in range(n):
	for j in range(n):
		id=j+i*1000+1
		n1=id
		n2=id+1
		n3=id+1+1000
		n4=id+1000
		material.MohrCoulomb( id, 10000000, c,phi,phi)
		element.quad4d( id, n1, n2, n3, n4, id)
# bc's
for i in range(n+1):
	for j in range(n+1):
		id=j+i*1000+1
		x=j*dx
		y=i*dx-L
		if x==0.:
			node.fix(id,1)
		if x==+L:
			node.fix(id,1)
		if y==-L:
			node.fix(id,1)
			node.fix(id,2)
db.store("geom")
db.exportToVtk("geom")


#==========================================================
# analysis options
#==========================================================
analysis.static()
imposer.elimination()
reorder.rCM()
algorithm.iNR()
soe.band()
convergence.set(800,1e-3,1e-6,1e-6)
control.load(1.)

#==========================================================
# lc 1 (initial)
#==========================================================
lc.define(1)
for i in range(n):
	for j in range(n):
		id=j+i*1000+1
		initial.stresses(id,2,0.,0.,-L, -2.*10.*L, 1.-sin(phi))
analysis.run(1,1)

db.store("lc01")
db.exportToVtk("lc01")

#==========================================================
# lc 2... (excavations)
#==========================================================
lc.define(2)
for i in range(n):
	for j in range(n):
		id=j+i*1000+1
		x=j*dx
		y=i*dx-L
		if x<1.0 and y>-Ho:
			group.state(id,0)
		else:
			group.state(1,1,1.0,1.0,1.0,1.0)
analysis.run(2,1)

db.store("lc02")
db.exportToVtk("lc02")

#==========================================================
# lc 2... (excavations)
#==========================================================
#~ Ho=4.
#~ for k in range(2,2+steps):
	#~ print "LC    : ",k
	#~ print "Depth : ",Ho+(k-1)*dx,"/",H
	#~ lc.define(k)
	#~ for i in range(n):
		#~ for j in range(n):
			#~ id=j+i*1000+1
			#~ x=j*dx
			#~ y=i*dx-L
			#~ if x<1.0 and y>-(Ho+k*dx):
				#~ group.state(id,0)
			#~ else:
				#~ group.state(1,1,1.0,1.0,1.0,1.0)
	#~ analysis.run(k,1)

	#~ db.store('lc%02i'%k)
	#~ db.exportToVtk('lc%02i'%k)
