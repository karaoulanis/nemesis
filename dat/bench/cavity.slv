
import pymesh.structured

n=3*9
L=9.
nStepOutput=5

E=10000.

x=[]
y=[]
for i in range(n+1):
	x.append(i*L/n)
	y.append(i*L/n)

uE=[]
uB=[]
uD=[]
for type in ["EAS","STD","BAR"]:
	print type
	kp=[]
	for nu in [0.46,0.47,0.48,0.49,0.499,0.4999,0.49999]:
		domain.planeStrain(1.0)
		material.elastic( 1, E, nu)
		nd,el=pymesh.structured.mesh2d(x,y)
		for i in nd:
			node.add(i[0],i[1],i[2])
		for i in el:
			if type=="EAS":
				element.quad4e(i[0],i[0],i[1],i[2],i[3],1)
			elif type=="BAR":
				element.quad4b(i[0],i[0],i[1],i[2],i[3],1)
			else:
				element.quad4d(i[0],i[0],i[1],i[2],i[3],1)
		for i in nd:
			if i[2]==0.:
				node.fix(i[0],1)
				node.fix(i[0],2)
			elif i[1]==0. or i[1]==L:
				node.fix(i[0],1)
				node.fix(i[0],2)

		lc.define(1)
		for i in nd:
			if i[2]==L:
				load.node(i[0],1,10.)

		# analysis
		analysis.static()
		algorithm.linear()
		reorder.rCM()
		soe.band()
		analysis.run(1,1)

		# results
		nA=int((n*n+n*(n-1)+1)/2)
		if type=="EAS":
			uE.append(node.data(nA)['disp'][0])
			kp.append(E/(3-6*nu))
		elif type=="BAR":
			uB.append(node.data(nA)['disp'][0])
			kp.append(E/(3-6*nu))
		else:
			uD.append(node.data(nA)['disp'][0])
			kp.append(E/(3-6*nu))
		domain.clear()
		
print len(kp)
print len(uE)
print len(uB)
print len(uD)
import pylab
from numpy import array
pylab.semilogx(kp,uE,'r-o',kp,uB,'b-o',kp,uD,'k-o')
pylab.grid(True)
pylab.show()
