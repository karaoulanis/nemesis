from math import pi
db.SQLite("triaxial")

domain.axisymmetric(1.0)
#material.elastic(1, 200000, 0.3, 20.)
material.elastic(2, 200000, 0.3, 20.)
material.MohrCoulomb(1, 2, 300., 30.*pi/180.,0.)
node.add(1, 0.0, 0.0)
node.add(2, 1.0, 0.0)
node.add(3, 1.0, 1.0)
node.add(4, 0.0, 1.0)
element.quad4d(1, 1, 2, 3, 4, 1)
node.fix(1,1)
node.fix(1,2)
node.fix(2,2)
node.fix(4,1)

lc.define(1,"isotropic")
load.node(4, 2, -100.)
load.node(3, 2, -200.)
load.node(3, 1, -100.)
load.node(2, 1, -100.)

lc.define(2,"isotropic")
load.node(4, 2, -100.)
load.node(3, 2, -200.)
load.node(3, 1, -100.)
load.node(2, 1, -100.)

lc.define(3,"deviatoric")
load.node(4, 2, -100.)
load.node(3, 2, -200.)
tracker.node(1, 4)

analysis.static()
algorithm.linear()
convergence.set(150,10,1e-2,1e-2)

control.load(1.0)
analysis.run(1,1)
print node.data(4)['disp']

control.load(1.0)
analysis.run(2,1)
print node.data(4)['disp']
